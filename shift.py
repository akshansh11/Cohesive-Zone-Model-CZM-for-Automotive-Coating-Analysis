# -*- coding: utf-8 -*-
"""shift.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tG_do7mHn922lQmxkFSiwZdMaUpNTazK
"""
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px


logo = "shift.jpg"  

# Display the logo above the app name with a moderate width
st.image(logo, width=150)  # Adjust the width as needed

# App title
st.title("Cohesive Zone Model (CZM) for Automotive Coating Analysis")

# Define traction-separation law
def traction_separation(delta, E, delta_c):
    """Returns the traction (stress) based on separation (displacement) using a linear CZM model."""
    return np.where(delta <= delta_c, E * delta, 0)

# Calculate fracture energy
def fracture_energy(E, delta_c):
    """Returns the fracture energy calculated using the CZM parameters."""
    return 0.5 * E * delta_c**2

# Sidebar for input parameters
st.sidebar.title("Input Parameters")

# Input parameters for the CZM
E = st.sidebar.slider('Elastic Modulus (E)', 100, 1000, 300)
delta_c = st.sidebar.slider('Critical Separation (delta_c)', 0.01, 1.0, 0.1)

# Traction-separation curve generation
delta_vals = np.linspace(0, 1, 100)
traction_vals = traction_separation(delta_vals, E, delta_c)

# Plot Traction-Separation Curve
st.subheader("Traction-Separation Curve")
fig, ax = plt.subplots()
ax.plot(delta_vals, traction_vals)
ax.set_xlabel('Separation (δ)')
ax.set_ylabel('Traction (T)')
st.pyplot(fig)

# Calculate and display fracture energy
G = fracture_energy(E, delta_c)
st.sidebar.write(f"Fracture Energy (G): {G:.3f} J/m²")

# Additional Feature: Stress contour map (dummy data example)
st.subheader("Stress Distribution Contour")
x, y = np.meshgrid(np.linspace(-1, 1, 100), np.linspace(-1, 1, 100))
stress = E * (1 - np.sqrt(x**2 + y**2))  # Simplified stress field equation

# Contour plot of stress distribution
fig2 = px.imshow(stress, color_continuous_scale='Viridis')
st.plotly_chart(fig2)



